type Query {
    
}
type Mutations {}
scalar Date
type Game {
    id: ID,
    title: String,
    cover: Image,
    sessions: [Session],
    # Add BGG data
}
enum WinningCondition {
    HIGHEST
    LOWEST
    NONE
}
type Session {
    id: ID,
    winningCondition: WinningCondition,
    cooperative: Bool,
    games: [Games],
    playtime: Int,
    variants: String,
    location: Location,
    comments: [Comment],
    participants: [Participant],
    createdAt: Date,
}
type Participant {
    id: ID,
    person: Person,
    score: Int,
    rank: Int,
    role: String
}
type Location {
    id: ID,
    name: String,
    address: String,
    lat: Float,
    lng: Float,
    sessions: [Sessions]
}
type Image {
    id: ID,
    photographer: Person,
    url: String,
    session: [Session],
    isReported: Bool,
    createdAt: Date
}
type Rating {
    id: ID,
    rating: Float,
    comment: Comment,
    createdAt: Date,
    game: Game
}
type Comment {
    id: ID,
    content: String,
    createdAt: Date,
    writtenBy: Person
}
type Stats {
    id: ID,
}
type Person {
    id: ID,
    name: String,
    sessions: [Session],
    ratings: [Rating]
    stats(game: ID): [Stats]
    followedBy: [Person],
    follows: [Person],
    # Needs an account?
}
